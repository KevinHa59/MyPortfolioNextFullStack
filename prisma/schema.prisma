// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")
}

// model Users {
//   id           String    @id @default(auto()) @map("_id") @db.ObjectId
//   email        String    @unique
//   firstName    String?
//   lastName     String?
//   dob          DateTime?
//   address      String?
//   city         String?
//   state        String?
//   country      String?
//   zipCode      String?
//   cellPhone    String?
//   homePhone    String?
//   linkedIn     String?
//   github       String?
//   twitter      String?
//   facebook     String?
//   instagram    String?
//   portfolio    String?
//   password     String?
//   userTypeID   String
//   userType     UserTypes @relation(fields: [userTypeID], references: [id])
//   refreshToken String?
//   resumes      Resume[]
//   course       Course[]

//   @@map("users")
// }

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  firstName    String?
  lastName     String?
  dob          DateTime?
  address      String?
  city         String?
  state        String?
  country      String?
  zipCode      String?
  cellPhone    String?
  homePhone    String?
  linkedIn     String?
  github       String?
  twitter      String?
  facebook     String?
  instagram    String?
  portfolio    String?
  password     String?
  userTypeID   String
  userType     UserTypes @relation(fields: [userTypeID], references: [id])
  refreshToken String?
  resumes      Resume[]
  course       Course[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@map("users")
}
// model User {
//   id            String          @id @default(auto()) @map("_id") @db.ObjectId
//   name          String?
//   email         String?         @unique
//   emailVerified DateTime?
//   image         String?
//   userTypeID   String
//   userType     UserTypes @relation(fields: [userTypeID], references: [id])
//   resumes      Resume[]
//   course       Course[]
//   accounts      Account[]
//   sessions      Session[]
 
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

model UserTypes {
  id          String              @id @default(auto()) @map("_id") @db.ObjectId
  type        String              @unique
  description String?             @default("")
  color       String?
  users       User[]
  pageLinks   UserTypePageLinks[]

  @@map("user_types")
}

model Pages {
  id            String              @id @default(auto()) @map("_id") @db.ObjectId
  path          String              @unique
  description   String?             @default("")
  userTypeLinks UserTypePageLinks[]

  @@map("pages")
}

model UserTypePageLinks {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  userTypeID String
  pageID     String
  userType   UserTypes @relation(fields: [userTypeID], references: [id])
  page       Pages     @relation(fields: [pageID], references: [id])

  @@unique([userTypeID, pageID])
  @@map("user_type_page_links")
}

model Resume {
  id                      String                   @id @default(auto()) @map("_id") @db.ObjectId
  userID                  String                   @db.ObjectId
  title                   String
  summary                 String?
  workExperience          WorkExperience[]
  education               Education[]
  skills                  Skill[]
  certifications          Certification[]
  projects                Project[]
  awards                  Award[]
  volunteerExperience     VolunteerExperience[]
  languages               Language[]
  publications            Publication[]
  professionalMemberships ProfessionalMembership[]
  hobbies                 Hobby[]
  resumeSectionsID        String?                  @db.ObjectId
  user                    User                    @relation(fields: [userID], references: [id])
  resumeSections          ResumeSection?

  @@map("resumes")
}

model ResumeSection {
  id                              String  @id @default(auto()) @map("_id") @db.ObjectId
  resumeID                        String  @unique @db.ObjectId
  workExperience                  Boolean @default(false)
  workExperiencePriority          Int     @default(1)
  education                       Boolean @default(true)
  educationPriority               Int     @default(2)
  skills                          Boolean @default(true)
  skillsPriority                  Int     @default(3)
  certifications                  Boolean @default(false)
  certificationsPriority          Int     @default(4)
  projects                        Boolean @default(true)
  projectsPriority                Int     @default(5)
  awards                          Boolean @default(false)
  awardsPriority                  Int     @default(6)
  volunteerExperience             Boolean @default(false)
  volunteerExperiencePriority     Int     @default(7)
  languages                       Boolean @default(true)
  languagesPriority               Int     @default(8)
  publications                    Boolean @default(false)
  publicationsPriority            Int     @default(9)
  professionalMemberships         Boolean @default(false)
  professionalMembershipsPriority Int     @default(10)
  hobbies                         Boolean @default(true)
  hobbiesPriority                 Int     @default(11)

  resume Resume @relation(fields: [resumeID], references: [id], onDelete: Cascade)
  @@map("resume_sections")
}

model WorkExperience {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  resumeID         String    @db.ObjectId
  jobTitle         String
  companyName      String
  location         String
  startDate        DateTime
  endDate          DateTime?
  responsibilities String

  resume Resume @relation(fields: [resumeID], references: [id], onDelete: Cascade)
  @@map("work_experiences")
}

model Education {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  resumeID     String    @db.ObjectId
  degree       String
  schoolName   String
  location     String
  startDate    DateTime
  endDate      DateTime?
  fieldOfStudy String
  gpa          Float?
  relevantCourseworks String[]

  resume Resume @relation(fields: [resumeID], references: [id], onDelete: Cascade)

  @@map("educations")
}

model Course {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String     @unique
  approved    Boolean    @default(false)
  createdBy   String     @db.ObjectId
  createdAt   DateTime   @default(now()) 
  user        User      @relation(fields: [createdBy], references: [id])

  @@map("courses")
}

model Skill {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  resumeID String  @db.ObjectId
  name     String
  group    String?

  resume Resume @relation(fields: [resumeID], references: [id], onDelete: Cascade)

  @@map("skills")
}

model Certification {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  resumeID            String   @db.ObjectId
  certificationName   String
  issuingOrganization String
  dateObtained        DateTime

  resume Resume @relation(fields: [resumeID], references: [id], onDelete: Cascade)

  @@map("certifications")
}

model Project {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  resumeID     String   @db.ObjectId
  title        String
  role         String
  description  String
  technologies String[]
  achievements String

  resume Resume @relation(fields: [resumeID], references: [id], onDelete: Cascade)

  @@map("projects")
}

model Award {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  resumeID            String    @db.ObjectId
  awardName           String
  issuingOrganization String
  dateReceived        DateTime?

  resume Resume @relation(fields: [resumeID], references: [id], onDelete: Cascade)

  @@map("awards")
}

model VolunteerExperience {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  resumeID         String    @db.ObjectId
  role             String
  organizationName String
  location         String
  startDate        DateTime
  endDate          DateTime?
  responsibilities String?

  resume Resume @relation(fields: [resumeID], references: [id], onDelete: Cascade)

  @@map("volunteer_experiences")
}

model Language {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  resumeID         String @db.ObjectId
  language         String
  proficiencyLevel String

  resume Resume @relation(fields: [resumeID], references: [id], onDelete: Cascade)

  @@map("languages")
}

model Publication {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  resumeID        String   @db.ObjectId
  title           String
  publicationName String
  datePublished   DateTime

  resume Resume @relation(fields: [resumeID], references: [id], onDelete: Cascade)

  @@map("publications")
}

model ProfessionalMembership {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  resumeID         String    @db.ObjectId
  organizationName String
  role             String
  startDate        DateTime
  endDate          DateTime?

  resume Resume @relation(fields: [resumeID], references: [id], onDelete: Cascade)

  @@map("professional_memberships")
}

model Hobby {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  resumeID String @db.ObjectId
  name     String

  resume Resume @relation(fields: [resumeID], references: [id], onDelete: Cascade)

  @@map("hobbies")
}
