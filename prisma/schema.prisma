// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Users {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  email String  @unique
  firstName  String?
  lastName  String?
  dob DateTime?
  address String?
  city String?
  state String?
  country String?
  zipCode String?
  cellPhone String?
  homePhone String?
  linkedIn String?
  github String?
  twitter String?
  facebook String?
  instagram String?
  portfolio String?
  password String?
  userTypeID String
  userType UserTypes @relation(fields: [userTypeID], references: [id])
  refreshToken String?
  resumes Resume[]
  @@map("users")
}

model UserTypes {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  type String @unique
  description String? @default("")
  color String?
  users Users[]
  pageLinks UserTypePageLinks[]
  @@map("user_types")
}

model Pages {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  path String @unique
  description String? @default("")
  userTypeLinks UserTypePageLinks[]
}

model UserTypePageLinks {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  userTypeID String
  pageID     String
  userType UserTypes @relation(fields: [userTypeID], references: [id])
  page       Pages     @relation(fields: [pageID], references: [id])
  @@unique([userTypeID, pageID])
}

model Resume {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  userID   String @db.ObjectId
  title    String
  summary  String?
  workExperience  WorkExperience[]
  education       Education[]
  skills          Skill[]
  certifications  Certification[]
  projects        Project[]
  awards          Award[]
  volunteerExperience VolunteerExperience[]
  languages       Language[]
  publications    Publication[]
  professionalMemberships ProfessionalMembership[]
  hobbies         Hobby[]

  user     Users   @relation(fields: [userID], references: [id])
  @@map("Resume")
}

model WorkExperience {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  resumeID       String @db.ObjectId
  jobTitle       String
  companyName    String
  location       String
  startDate      DateTime
  endDate        DateTime?
  responsibilities String

  resume         Resume @relation(fields: [resumeID], references: [id])
}

model Education {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  resumeID     String @db.ObjectId
  degree       String
  schoolName   String
  location     String
  startDate    DateTime
  endDate      DateTime?
  fieldOfStudy String
  gpa          Float?

  resume       Resume @relation(fields: [resumeID], references: [id])
}

model Skill {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  resumeID String @db.ObjectId
  name     String
  group     String?

  resume   Resume @relation(fields: [resumeID], references: [id])
}

model Certification {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  resumeID           String @db.ObjectId
  certificationName  String
  issuingOrganization String
  dateObtained       DateTime

  resume             Resume @relation(fields: [resumeID], references: [id])
}

model Project {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  resumeID      String @db.ObjectId
  title         String
  role          String
  description   String
  technologies  String[]
  achievements  String

  resume        Resume @relation(fields: [resumeID], references: [id])
}

model Award {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  resumeID          String @db.ObjectId
  awardName         String
  issuingOrganization String
  dateReceived      DateTime?

  resume            Resume @relation(fields: [resumeID], references: [id])
}

model VolunteerExperience {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  resumeID         String @db.ObjectId
  role             String
  organizationName String
  location         String
  startDate        DateTime
  endDate          DateTime?
  responsibilities String?

  resume           Resume @relation(fields: [resumeID], references: [id])
}

model Language {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  resumeID        String @db.ObjectId
  language        String
  proficiencyLevel String

  resume          Resume @relation(fields: [resumeID], references: [id])
}

model Publication {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  resumeID        String @db.ObjectId
  title           String
  publicationName String
  datePublished   DateTime

  resume          Resume @relation(fields: [resumeID], references: [id])
}

model ProfessionalMembership {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  resumeID         String @db.ObjectId
  organizationName String
  role             String
  startDate        DateTime
  endDate          DateTime?

  resume           Resume @relation(fields: [resumeID], references: [id])
}

model Hobby {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  resumeID String @db.ObjectId
  name     String

  resume   Resume @relation(fields: [resumeID], references: [id])
}